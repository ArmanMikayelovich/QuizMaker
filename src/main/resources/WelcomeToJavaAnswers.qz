1. B, E. C++ has operator overloading and pointers. Java made a
point of not having either. Java does have references to objects,
but these are pointing to an object that can move around in
memory. Option B is correct because Java is platform
independent. Option E is correct because Java is object-oriented.
While it does support some parts of functional programming,
these occur within a class.
2. C, D. Java puts source code in .java files and bytecode in .class
files. It does not use a .bytecode file. When running a Java
program, you pass just the name of the class without the .class
extension.
3. C, D. This example is using the single-file source-code launcher. It
compiles in memory rather than creating a .class file, making
option A incorrect. To use this launcher, programs can only
reference classes built into the JDK. Therefore, option B is
incorrect, and options C and D are correct.
4. C, D. The Tank class is there to throw you off since it isn’t used by
AquariumVisitor. Option C is correct because it imports Jelly by
class name. Option D is correct because it imports all the classes
in the jellies package, which includes Jelly. Option A is
incorrect because it only imports classes in the aquarium package
—Tank in this case—and not those in lower-level packages. Option
B is incorrect because you cannot use wildcards anywhere other
than the end of an import statement. Option E is incorrect because
you cannot import parts of a class with a regular import statement.
Option F is incorrect because options C and D do make the code
compile.
5. A, C, D, E. Eclipse is an integrated development environment
(IDE). It is not included in the Java Development Kit (JDK),
making option B incorrect. The JDK comes with a number of
command-line tools including a compiler, packager, and
documentation, making options A, D, and E correct. The JDK also
includes the Java Virtual Machine (JVM), making option C
correct.
6. E. The first two imports can be removed because java.lang is
automatically imported. The following two imports can be
removed because Tank and Water are in the same package, making
the correct option E. If Tank and Water were in different packages,
exactly one of these two imports could be removed. In that case,
the answer would be option D.
7. A, B, C. Option A is correct because it imports all the classes in the
aquarium package including aquarium.Water. Options B and C are
correct because they import Water by class name. Since importing
by class name takes precedence over wildcards, these compile.
Option D is incorrect because Java doesn’t know which of the two
wildcard Water classes to use. Option E is incorrect because you
cannot specify the same class name in two imports.
8. A, B. The wildcard is configured for files ending in .java, making
options E and F incorrect. Additionally, wildcards aren’t
recursive, making options C and D incorrect. Therefore, options A
and B are correct.
9. B. Option B is correct because arrays start counting from zero and
strings with spaces must be in quotes. Option A is incorrect
because it outputs Blue. C is incorrect because it outputs Jay.
Option D is incorrect because it outputs Sparrow. Options E and F
are incorrect because they output
java.lang.ClassNotFoundException: BirdDisplay .class.
10. E. Option E is the canonical main() method signature. You need to
memorize it. Option A is incorrect because the main() method
must be public. Options B and F are incorrect because the main()
method must have a void return type. Option C is incorrect
because the main() method must be static. Option D is incorrect
because the main() method must be named main.
11. C, D. While we wish it were possible to guarantee bug-free code,
this is not something a language can ensure, making option A
incorrect. Deprecation is an indication that other code should be
preferred. It doesn’t preclude or require eventual removal,
making option B incorrect. Option E is incorrect because
backward compatibility is a design goal, not sideways
compatibility. Options C and D are correct.
12. C, E. When compiling with javac, you can specify a classpath with
-cp or a directory with -d, making options C and E correct. Since
the options are case sensitive, option D is incorrect. The other
options are not valid on the javac command.
13. C. When running a program using java, you specify the classpath
with -cp, making option C correct. Options D and F are incorrect
because -d and -p are used for modules. Options A and B are not
valid options on the java command.
14. A, B, C, E. When creating a jar file, you use the options -cf or -
cvf, making options A and E correct. The jar command allows the
use of the classpath, making option C correct. It also allows the
specification of a directory using -C, making option B correct.
Options D and F are incorrect because -d and -p are used for
modules.
15. E. The main() method isn’t static. It is a method that happens to
be named main(), but it’s not an application entry point. When the
program is run, it gives the error. If the method were static, the
answer would be option D. Arrays are zero-based, so the loop
ignores the first element and throws an exception when accessing
the element after the last one.
16. D. The package name represents any folders underneath the
current path, which is named.A in this case. Option C is incorrect
because package names are case sensitive, just like variable names
and other identifiers.
17. A, E. Bunny is a class, which can be seen from the declaration:
public class Bunny. The variable bun is a reference to an object.
The method main() is the standard entry point to a program.
Option G is incorrect because the parameter type matters, not the
parameter name.
18. C, D, E. The package and import statements are both optional. If
both are present, the order must be package, then import, and then
class. Option A is incorrect because class is before package and
import. Option B is incorrect because import is before package.
Option F is incorrect because class is before package.
19. B, C. Eclipse is an integrated development environment (IDE). It
is available from the Eclipse Foundation, not from Oracle, making
option C one of the answers. The other answer is option B because
the Java Development Kit (JDK) is what you download to get
started. The Java Runtime Environment (JRE) was an option for
older versions of Java, but it’s no longer a download option for
Java 11.
20. A, B, E. Unfortunately, this is something you have to memorize.
The code with the hyphenated word class-path uses two dashes in
front, making option E correct and option D incorrect. The
reverse is true for the unhyphenated classpath, making option B
correct and option C incorrect. Finally, the short form is option A.